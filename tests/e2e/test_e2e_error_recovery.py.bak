"""
End-to-end tests for error recovery and circuit breaker functionality.

These tests verify that the error recovery and circuit breaker mechanisms work correctly
to handle failures and prevent cascading issues during test generation and validation.
"""

import os
import shutil
import tempfile
import time

import pytest

from qa_agent.config import QAAgentConfig
from qa_agent.error_recovery import Checkpoint, CircuitBreaker, CircuitBreakerOpenError, CircuitBreakerState, ErrorHandler, QAAgentError
from qa_agent.models import CodeFile, FileType, Function, GeneratedTest, TestResult
from qa_agent.workflows import QAWorkflow


class TestErrorRecoveryE2E:
    """End-to-end tests for error recovery mechanisms."""

    @pytest.mark.e2e
    def test_checkpoint_mechanism(self, mocker, sample_repo_path, e2e_config, disable_api_calls):
        """Test checkpoint creation and restoration during workflow execution."""
        # Set up configuration
        e2e_config.repo_path = sample_repo_path
        e2e_config.output_directory = os.path.join(tempfile.gettempdir(), "qa_agent_checkpoint_tests")
        os.makedirs(e2e_config.output_directory, exist_ok=True)

        # Create a function for testing
        function = Function(
            name="divide_numbers",
            code="def divide_numbers(a, b):\n    if b == 0:\n        raise ValueError('Cannot divide by zero')\n    return a / b",
            file_path=os.path.join(sample_repo_path, "sample_module", "utils.py"),
            start_line=25,
            end_line=29,
            docstring="Divide a by b and return the result.",
            parameters=[{"name": "a", "type": "int"}, {"name": "b", "type": "int"}],
            return_type="float",
            dependencies=[],
            complexity=2,
            cognitive_complexity=2,
            last_modified="",
            call_frequency=0,
            class_name=None,
            language=FileType.PYTHON,
            test_coverage=0.0,
            imports=[]
        )

        # Create a checkpoint manager
        checkpoint_dir = os.path.join(tempfile.gettempdir(), "qa_agent_checkpoint_tests", "checkpoints")
        os.makedirs(checkpoint_dir, exist_ok=True)
        checkpoint_manager = Checkpoint(
            checkpoint_dir=checkpoint_dir,
            workflow_name="test_workflow",
            throttle=False  # Disable throttling for testing
        )

        # Create a workflow state to save
        state = {
            "functions": [function],
            "current_function_index": 0,
            "current_function": function,
            "status": "Test checkpoint"
        }

        # Save the checkpoint
        checkpoint_path = checkpoint_manager.save_checkpoint(state)
        
        # Verify the checkpoint was created
        assert os.path.exists(checkpoint_path)
        
        # Restore the checkpoint
        restored_state = checkpoint_manager.restore_checkpoint()
        
        # Verify the restored state matches the original
        assert restored_state is not None
        assert restored_state.get("functions")[0].name == function.name
        assert restored_state.get("current_function_index") == 0
        assert restored_state.get("status") == "Test checkpoint"
        
        # Clean up
        if os.path.exists(e2e_config.output_directory):
            shutil.rmtree(e2e_config.output_directory)

    @pytest.mark.e2e
    def test_circuit_breaker_pattern(self, mocker, sample_repo_path, e2e_config, disable_api_calls):
        """Test circuit breaker pattern with proper time simulation using pytest-mock."""
        # Set up configuration
        e2e_config.repo_path = sample_repo_path
        e2e_config.output_directory = os.path.join(tempfile.gettempdir(), "qa_agent_circuit_breaker_tests")
        os.makedirs(e2e_config.output_directory, exist_ok=True)
        
        # Debug function for better visibility in test output
        def debug(msg):
            print(f"[DEBUG] {msg}")
            
        # Create a circuit breaker with low thresholds for testing
        circuit_breaker = CircuitBreaker(
            failure_threshold=3,
            recovery_timeout=60,
            half_open_max_calls=2
        )
        
        # Mock time.time() to simulate time passing without actual delays
        time_mock = mocker.patch('time.time')
        time_mock.return_value = 1000  # Start time
        
        # Verify initial state is CLOSED
        assert circuit_breaker.state == CircuitBreakerState.CLOSED
        
        # Create a failing function that will trigger the circuit breaker
        def failing_function():
            raise ValueError("Test error")
            
        # Create a success function for when the circuit recovers
        def success_function():
            return True
            
        # Register the operation
        circuit_breaker.register_operation("test_operation")
        
        # Trigger failures to reach the threshold
        for i in range(1, 4):
            try:
                with circuit_breaker:
                    circuit_breaker.current_operation = "test_operation"
                    failing_function()
            except ValueError:
                debug(f"Failure {i} recorded")
                
        # Verify circuit is now OPEN
        assert circuit_breaker.state == CircuitBreakerState.OPEN
        debug(f"Circuit state changed to {circuit_breaker.state}")
        
        # Try to execute again while circuit is OPEN
        try:
            with circuit_breaker:
                circuit_breaker.current_operation = "test_operation"
                failing_function()
            assert False, "Circuit should be open and prevent execution"
        except CircuitBreakerOpenError:
            debug("CircuitBreakerOpenError correctly raised while circuit is OPEN")
            
        # Simulate time passing to allow circuit to go to HALF_OPEN
        time_mock.return_value = 1070  # 70 seconds later, past the 60s recovery timeout
        
        # Circuit should now go to HALF_OPEN on the next attempt
        try:
            with circuit_breaker:
                circuit_breaker.current_operation = "test_operation"
                success_function()  # Should work this time
            debug("Successful call in HALF_OPEN state")
        except Exception as e:
            assert False, f"Should not raise exception in HALF_OPEN state: {str(e)}"
            
        # Verify circuit is now in HALF_OPEN
        assert circuit_breaker.state == CircuitBreakerState.HALF_OPEN
        
        # One more successful call should close the circuit
        with circuit_breaker:
            circuit_breaker.current_operation = "test_operation"
            success_function()
        
        # Verify circuit is now CLOSED again
        assert circuit_breaker.state == CircuitBreakerState.CLOSED
        debug(f"Circuit state changed back to {circuit_breaker.state}")
        
        # Clean up
        if os.path.exists(e2e_config.output_directory):
            shutil.rmtree(e2e_config.output_directory)

    @pytest.mark.e2e
    def test_workflow_with_error_recovery(self, mocker, sample_repo_path, e2e_config, disable_api_calls):
        """Test the QA workflow with error recovery."""
        # Set up configuration
        e2e_config.repo_path = sample_repo_path
        e2e_config.output_directory = os.path.join(tempfile.gettempdir(), "qa_agent_error_recovery_tests")
        os.makedirs(e2e_config.output_directory, exist_ok=True)
        
        # Create a function for testing
        function = Function(
            name="divide_numbers",
            code="def divide_numbers(a, b):\n    if b == 0:\n        raise ValueError('Cannot divide by zero')\n    return a / b",
            file_path=os.path.join(sample_repo_path, "sample_module", "utils.py"),
            start_line=25,
            end_line=29,
            docstring="Divide a by b and return the result.",
            parameters=[{"name": "a", "type": "int"}, {"name": "b", "type": "int"}],
            return_type="float",
            dependencies=[],
            complexity=2,
            cognitive_complexity=2,
            last_modified="",
            call_frequency=0,
            class_name=None,
            language=FileType.PYTHON,
            test_coverage=0.0,
            imports=[]
        )
        
        # Create a mock test that initially fails and then succeeds after fixing
        initial_test = GeneratedTest(
            function=function,
            test_code="import pytest\nfrom sample_module.utils import divide_numbers\n\ndef test_divide_numbers():\n    # This test will fail\n    assert divide_numbers(5, 2) == 3.0\n",
            test_file_path=os.path.join(e2e_config.output_directory, "test_divide_numbers.py"),
            imports=["pytest", "sample_module.utils.divide_numbers"],
            mocks=[],
            fixtures=[],
            test_functions=["test_divide_numbers"],
            test_classes=[],
        )
        
        fixed_test = GeneratedTest(
            function=function,
            test_code="import pytest\nfrom sample_module.utils import divide_numbers\n\ndef test_divide_numbers():\n    # Fixed test\n    assert divide_numbers(5, 2) == 2.5\n    with pytest.raises(ValueError):\n        divide_numbers(1, 0)\n",
            test_file_path=os.path.join(e2e_config.output_directory, "test_divide_numbers.py"),
            imports=["pytest", "sample_module.utils.divide_numbers"],
            mocks=[],
            fixtures=[],
            test_functions=["test_divide_numbers"],
            test_classes=[],
        )
        
        # Create test results
        failing_result = TestResult(
            success=False,
            test_file=os.path.join(e2e_config.output_directory, "test_divide_numbers.py"),
            target_function="divide_numbers",
            output="1 failed",
            coverage=50.0,
            error_message="AssertionError: assert 2.5 == 3.0",
            execution_time=0.1,
            errors=["AssertionError: assert 2.5 == 3.0"],
            passes=0,
            failures=1
        )
        
        success_result = TestResult(
            success=True,
            test_file=os.path.join(e2e_config.output_directory, "test_divide_numbers.py"),
            target_function="divide_numbers",
            output="2 passed",
            coverage=100.0,
            error_message="",  # Empty string instead of None
            execution_time=0.1,
            errors=[],
            passes=2,
            failures=0
        )
        
        # Mock the workflow methods using pytest-mock
        mock_identify = mocker.patch("qa_agent.workflows.QAWorkflow._identify_functions")
        mock_context = mocker.patch("qa_agent.workflows.QAWorkflow._get_function_context")
        mock_generate = mocker.patch("qa_agent.workflows.QAWorkflow._generate_test")
        mock_validate = mocker.patch("qa_agent.workflows.QAWorkflow._validate_test")
        mock_fix = mocker.patch("qa_agent.workflows.QAWorkflow._fix_test")
        
        # Setup mocks to return state dictionaries with the right values
        
        # _identify_functions should return a state with functions
        mock_identify.return_value = {
            "functions": [function],
            "current_function_index": 0,
            "current_function": function,
            "status": "Identified functions"
        }
        
        # _get_function_context should return a state with context_files
        mock_context.return_value = {
            "functions": [function],
            "current_function_index": 0,
            "current_function": function,
            "context_files": [],
            "status": "Got context"
        }
        
        # _generate_test should return a state with generated_test
        mock_generate.return_value = {
            "functions": [function],
            "current_function_index": 0,
            "current_function": function,
            "context_files": [],
            "generated_test": initial_test,
            "status": "Generated test"
        }
        
        # _validate_test should first return failing result, then success result
        mock_validate.side_effect = [
            {
                "functions": [function],
                "current_function_index": 0,
                "current_function": function,
                "context_files": [],
                "generated_test": initial_test,
                "test_result": failing_result,
                "status": "Validation failed"
            },
            {
                "functions": [function],
                "current_function_index": 0,
                "current_function": function,
                "context_files": [],
                "generated_test": fixed_test,
                "test_result": success_result,
                "status": "Validation succeeded"
            }
        ]
        
        # _fix_test should return a state with fixed test
        mock_fix.return_value = {
            "functions": [function],
            "current_function_index": 0,
            "current_function": function,
            "context_files": [],
            "generated_test": fixed_test,
            "status": f"Fixed test for {function.name}"
        }
        
        # Run the workflow
        workflow = QAWorkflow(e2e_config)
        
        # Modify the route behavior to ensure we go through fix path on the first validation failure
        original_route_after_validation = workflow._route_after_validation
        
        def mock_route_after_validation(state):
            if state.get("test_result") and not state.get("test_result").success:
                return "fix"
            return "next"
        
        # Override routing in workflow
        workflow._route_after_validation = mock_route_after_validation
        workflow._route_after_fix = lambda state: "validate"
        workflow._route_after_next = lambda state: "finish"
        
        # Run the workflow
        final_state = workflow.run()
        
        # Assert that the workflow completed
        assert final_state is not None
        # We don't assert for specific status text since it might differ based on environment
        
        # Verify that methods were called correctly
        mock_identify.assert_called_once()
        mock_generate.assert_called_once()
        assert mock_validate.call_count == 2  # Once for initial test, once for fixed test
        mock_fix.assert_called_once()
        
        # Clean up
        if os.path.exists(e2e_config.output_directory):
            shutil.rmtree(e2e_config.output_directory)

    @pytest.mark.e2e
    def test_error_diagnostics_collection(self, mocker, sample_repo_path, e2e_config, disable_api_calls):
        """Test collection of error diagnostics for troubleshooting."""
        # Set up configuration
        e2e_config.repo_path = sample_repo_path
        e2e_config.output_directory = os.path.join(tempfile.gettempdir(), "qa_agent_diagnostics_tests")
        os.makedirs(e2e_config.output_directory, exist_ok=True)
        
        # Create an error handler
        error_handler = ErrorHandler()
        
        # Create failing functions with different error types
        def value_error_func():
            raise ValueError("Test value error")
            
        def type_error_func():
            raise TypeError("Test type error")
            
        def syntax_error_func():
            raise SyntaxError("Test syntax error")
        
        # Define different contexts for operations
        error_contexts = [
            {"function": "test_func_1", "line": 42, "severity": "high"},
            {"function": "test_func_2", "line": 55, "severity": "medium"},
            {"file": "test_module.py", "operation": "parsing"}
        ]
        
        # Execute operations that will fail with different errors and contexts
        try:
            error_handler.execute_with_retry(
                value_error_func,
                operation_name="test_op_1",
                error_message="Expected value error",
                context=error_contexts[0]
            )
        except ValueError:
            # Expected exception
            pass
            
        try:
            error_handler.execute_with_retry(
                type_error_func,
                operation_name="test_op_1",
                error_message="Expected type error",
                context=error_contexts[1]
            )
        except TypeError:
            # Expected exception
            pass
            
        try:
            error_handler.execute_with_retry(
                syntax_error_func,
                operation_name="test_op_2",
                error_message="Expected syntax error",
                context=error_contexts[2]
            )
        except SyntaxError:
            # Expected exception
            pass
        
        # Get error logs
        error_logs = error_handler.error_logs
        
        # Verify error logs (checking for key parts of the information)
        assert len(error_logs) >= 3  # At least 3 logs (may have more with retries)
        
        # Check each required error is logged (using any/filter to find matching errors)
        value_error_log = next((log for log in error_logs if "ValueError" in log.get("exception_type", "")), None)
        assert value_error_log is not None
        assert "test_op_1" in value_error_log.get("operation", "")
        
        type_error_log = next((log for log in error_logs if "TypeError" in log.get("exception_type", "")), None)
        assert type_error_log is not None
        assert "test_op_1" in type_error_log.get("operation", "")
        
        syntax_error_log = next((log for log in error_logs if "SyntaxError" in log.get("exception_type", "")), None)
        assert syntax_error_log is not None
        assert "test_op_2" in syntax_error_log.get("operation", "")
        
        # Test saving error logs to file 
        log_file = os.path.join(e2e_config.output_directory, "error_logs.json")
        error_handler.save_error_logs(log_file)
        
        # Verify log file exists
        assert os.path.exists(log_file)
        
        # Clean up
        if os.path.exists(e2e_config.output_directory):
            shutil.rmtree(e2e_config.output_directory)


if __name__ == "__main__":
    pytest.main(["-v", "test_e2e_error_recovery.py"])